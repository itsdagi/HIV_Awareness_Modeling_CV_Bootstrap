# Function for bootstrapping to calculate mean and median
bootstrap_results <- function(data, iterations, sample_size) {
# empty vectors for storing results for later
mean_values <- numeric(iterations)
median_values <- numeric(iterations)
#bootstrapping
for (i in 1:iterations) {
CD4_data_sample <- sample(data, size = CD4_data_sample, replace = TRUE)  # Sample with replacement
mean_values[i] <- mean(CD4_data_sample )
median_values[i] <- median(CD4_data_sample)
}
# Calculate 95% confidence intervals
mean_ci <- quantile(mean_values, c(0.025, 0.975))
median_ci <- quantile(median_values, c(0.025, 0.975))
# results
return(list(mean = mean(mean_values), mean_ci = mean_ci,
median = median(median_values), median_ci = median_ci))
}
#bootstrapping
results <- bootstrap_results(cd4_data, iterations, sample_size)
set.seed(9713)
# CD4 counts ofthe patients
cd4_data <- c(258, 268, 264, 286, 270, 231, 253, 220, 240, 230, 240, 260, 240, 296, 266, 227, 264, 264,
230, 254, 262, 267, 241, 231, 237, 244, 269, 247, 224, 246, 244, 219, 253, 238, 244, 243,
258, 222, 246, 254, 253, 229, 247, 221, 255, 253, 248, 241, 215, 220)
# Set sample size and iterations
sample_size <- 30
iterations <- 10000  # num of bootstraping samples
# Function for bootstrapping to calculate mean and median
bootstrap_results <- function(data, iterations, sample_size) {
# empty vectors for storing results for later
mean_values <- numeric(iterations)
median_values <- numeric(iterations)
#bootstrapping
for (i in 1:iterations) {
CD4_data_sample <- sample(data, size = cd4_data, replace = TRUE)  # Sample with replacement
mean_values[i] <- mean(CD4_data_sample )
median_values[i] <- median(CD4_data_sample)
}
# Calculate 95% confidence intervals
mean_ci <- quantile(mean_values, c(0.025, 0.975))
median_ci <- quantile(median_values, c(0.025, 0.975))
# results
return(list(mean = mean(mean_values), mean_ci = mean_ci,
median = median(median_values), median_ci = median_ci))
}
#bootstrapping
results <- bootstrap_results(cd4_data, iterations, sample_size)
set.seed(9713)
# CD4 counts ofthe patients
cd4_data <- c(258, 268, 264, 286, 270, 231, 253, 220, 240, 230, 240, 260, 240, 296, 266, 227, 264, 264,
230, 254, 262, 267, 241, 231, 237, 244, 269, 247, 224, 246, 244, 219, 253, 238, 244, 243,
258, 222, 246, 254, 253, 229, 247, 221, 255, 253, 248, 241, 215, 220)
# Set sample size and iterations
sample_size <- 30
iterations <- 10000  # num of bootstraping samples
# Function for bootstrapping to calculate mean and median
bootstrap_results <- function(data, iterations, sample_size) {
# empty vectors for storing results for later
mean_values <- numeric(iterations)
median_values <- numeric(iterations)
#bootstrapping
for (i in 1:iterations) {
CD4_data_sample <- sample(data, size = cd4_data, replace = TRUE)  # Sample with replacement
mean_values[i] <- mean(CD4_data_sample )
median_values[i] <- median(CD4_data_sample)
}
# Calculate 95% confidence intervals
mean_ci <- quantile(mean_values, c(0.025, 0.975))
median_ci <- quantile(median_values, c(0.025, 0.975))
# results
return(list(mean = mean(mean_values), mean_ci = mean_ci,
median = median(median_values), median_ci = median_ci))
}
#bootstrapping
results <- bootstrap_results(CD4_data_sample, iterations, sample_size)
set.seed(9713)
# CD4 counts ofthe patients
cd4_data <- c(258, 268, 264, 286, 270, 231, 253, 220, 240, 230, 240, 260, 240, 296, 266, 227, 264, 264,
230, 254, 262, 267, 241, 231, 237, 244, 269, 247, 224, 246, 244, 219, 253, 238, 244, 243,
258, 222, 246, 254, 253, 229, 247, 221, 255, 253, 248, 241, 215, 220)
# Set sample size and iterations
sample_size <- 30
iterations <- 10000  # num of bootstraping samples
# Function for bootstrapping to calculate mean and median
bootstrap_results <- function(data, iterations, sample_size) {
# empty vectors for storing results for later
mean_values <- numeric(iterations)
median_values <- numeric(iterations)
#bootstrapping
for (i in 1:iterations) {
CD4_data_sample <- sample(data, size = cd4_data, replace = TRUE)  # Sample with replacement
mean_values[i] <- mean(CD4_data_sample )
median_values[i] <- median(CD4_data_sample)
}
# Calculate 95% confidence intervals
mean_ci <- quantile(mean_values, c(0.025, 0.975))
median_ci <- quantile(median_values, c(0.025, 0.975))
# results
return(list(mean = mean(mean_values), mean_ci = mean_ci,
median = median(median_values), median_ci = median_ci))
}
#bootstrapping
results <- bootstrap_results(cd4_data, iterations, sample_size)
set.seed(9713)
# CD4 counts ofthe patients
cd4_data <- c(258, 268, 264, 286, 270, 231, 253, 220, 240, 230, 240, 260, 240, 296, 266, 227, 264, 264,
230, 254, 262, 267, 241, 231, 237, 244, 269, 247, 224, 246, 244, 219, 253, 238, 244, 243,
258, 222, 246, 254, 253, 229, 247, 221, 255, 253, 248, 241, 215, 220)
# Set sample size and iterations
sample_size <- 30
iterations <- 10000  # num of bootstraping samples
# Function for bootstrapping to calculate mean and median
bootstrap_results <- function(data, iterations, sample_size) {
# empty vectors for storing results for later
mean_values <- numeric(iterations)
median_values <- numeric(iterations)
#bootstrapping
for (i in 1:iterations) {
CD4_data_sample <- sample(data, size = cd4_data, replace = TRUE)  # Sample with replacement
mean_values[i] <- mean(CD4_data_sample )
median_values[i] <- median(CD4_data_sample)
}
# Calculate 95% confidence intervals
mean_ci <- quantile(mean_values, c(0.025, 0.975))
median_ci <- quantile(median_values, c(0.025, 0.975))
# results
return(list(mean = mean(mean_values), mean_ci = mean_ci,
median = median(median_values), median_ci = median_ci))
}
#bootstrapping
results <- bootstrap_results(cd4_data, iterations, sample_size)
set.seed(9713)
# CD4 counts ofthe patients
cd4_data <- c(258, 268, 264, 286, 270, 231, 253, 220, 240, 230, 240, 260, 240, 296, 266, 227, 264, 264,
230, 254, 262, 267, 241, 231, 237, 244, 269, 247, 224, 246, 244, 219, 253, 238, 244, 243,
258, 222, 246, 254, 253, 229, 247, 221, 255, 253, 248, 241, 215, 220)
# Set sample size and iterations
sample_size <- 30
iterations <- 10000  # num of bootstraping samples
# Function for bootstrapping to calculate mean and median
bootstrap_results <- function(data, iterations, sample_size) {
# empty vectors for storing results for later
mean_values <- numeric(iterations)
median_values <- numeric(iterations)
#bootstrapping
for (i in 1:iterations) {
CD4_data_sample <- sample(data, size = cd4_data, replace = TRUE)  # Sample with replacement
mean_values[i] <- mean(CD4_data_sample )
median_values[i] <- median(CD4_data_sample)
}
# Calculate 95% confidence intervals
mean_ci <- quantile(mean_values, c(0.025, 0.975))
median_ci <- quantile(median_values, c(0.025, 0.975))
# results
return(list(mean = mean(mean_values), mean_ci = mean_ci,
median = median(median_values), median_ci = median_ci))
}
#bootstrapping
results <- bootstrap_results(cd4_data, iterations,size= sample_size)
set.seed(9713)
# CD4 counts of the patients
cd4_data <- c(258, 268, 264, 286, 270, 231, 253, 220, 240, 230, 240, 260, 240, 296, 266, 227, 264, 264,
230, 254, 262, 267, 241, 231, 237, 244, 269, 247, 224, 246, 244, 219, 253, 238, 244, 243,
258, 222, 246, 254, 253, 229, 247, 221, 255, 253, 248, 241, 215, 220)
# Set sample size and iterations
sample_size <- 30
iterations <- 10000  # number of bootstrap samples
# Function for bootstrapping to calculate mean and median
bootstrap_results <- function(data, iterations, sample_size) {
# empty vectors for storing results
mean_values <- numeric(iterations)
median_values <- numeric(iterations)
# bootstrapping
for (i in 1:iterations) {
CD4_data_sample <- sample(data, size = sample_size, replace = TRUE)  # Sample with replacement
mean_values[i] <- mean(CD4_data_sample)
median_values[i] <- median(CD4_data_sample)
}
# Calculate 95% confidence intervals
mean_ci <- quantile(mean_values, c(0.025, 0.975))
median_ci <- quantile(median_values, c(0.025, 0.975))
# results
return(list(mean = mean(mean_values), mean_ci = mean_ci,
median = median(median_values), median_ci = median_ci))
}
# Perform bootstrapping
results <- bootstrap_results(cd4_data, iterations, sample_size)
# Output the results
cat("Estimated Mean: ", results$mean, "\n")
cat("95% CI for Mean: [", results$mean_ci[1], ", ", results$mean_ci[2], "]\n")
cat("Estimated Median: ", results$median, "\n")
cat("95% CI for Median: [", results$median_ci[1], ", ", results$median_ci[2], "]\n")
# I choose the logistic regression model because outcome variable is binary yes or no
# v012, v024, v106, v130, v151 as explanatory variables
# Fit logistic regression model
model <- glm(v783 ~ v012 + v024 + v106 + v130 + v151,
data = newDf, family = binomial)
# I choose the logistic regression model because the outcome variable is binary (yes or no)
# Using v012 (age), v024 (region), v106 (education), v130 (religion), and v151 (sex of household head) as explanatory variables
# Fit logistic regression model
model <- glm(v783 ~ v012 + v024 + v106 + v130 + v151,
data = newDf, family = binomial(link = "logit"))
#  converting v783 col to factor
newDf$v783 <- factor(newDf$v783, levels = c(0, 1), labels = c("No Clue", "In the Know"))
#  v012:- Respondent's current age  v024:- Region v106:- Highest educational level v130: Religion v151: Sex of household head
# converting them to factors
newDf$v024 <- as.factor(newDf$v024)
newDf$v106 <- as.factor(newDf$v106)
newDf$v130 <- as.factor(newDf$v130)
newDf$v151 <- as.factor(newDf$v151)
# create the table
socio_demographic_table <- table(
Knows_HIV_Test = newDf$v783,
Age = newDf$v012,
Region = newDf$v024,
Education = newDf$v106,
Religion = newDf$v130,
Head_Gender = newDf$v151
)
# Print the table
print(socio_demographic_table)
# I choose the logistic regression model because the outcome variable is binary (yes or no)
# Using v012 (age), v024 (region), v106 (education), v130 (religion), and v151 (sex of household head) as explanatory variables
# Fit logistic regression model
model <- glm(v783 ~ v012 + v024 + v106 + v130 + v151,
data = newDf, family = binomial(link = "logit"))
set.seed(9713)
newDf <- women15_49[sample(nrow(women15_49), 2500), ]
library(haven) # should install haven for  package first to load dta for stata files first since the data is using the latest stata file version
women15_49 <- read_dta('women15_49.dta')
head(women15_49)
# histogram plot
hist(randNums, breaks = 20, col = "lightblue", border = "darkblue",
main = "Histogram of Chi-Square Distribution (df=2)",
xlab = "Score", ylab = "Probability", probability = TRUE)
# Add Chi-Square probability curve for comparison
curve(dchisq(x, df = 2), col = "darkgreen", lwd = 2, add = TRUE)
# Description: This histogram shows how often different scores appear
# in our sample from a Chi-Square distribution with 2 degrees of freedom.
# The blue bars represent our data, while the green line shows the expected
# shape of this distribution.
library(e1071)
summary(randNums)  # maximum , min , quartile first and third second being median 🫡
sd(randNums)       # Standard deviation
var(randNums)      # Variance
skewness(randNums) # it measures asymmetry meaning could be left or right skewed
kurtosis(randNums) # it measures wherether or not the data is picked or not
# Further justification and reasons Justification:Mean, Median, Min, Max: Give an overview of central tendency and range of data. SD, Variance: Measure the spread of the data. Skewness, Kurtosis: These help analyze the distribution's shape; skewness for asymmetry, kurtosis for tail weight.
set.seed(9713)  # my ID: GSR/9713/17  Dagim Alemu
randNums <- rchisq(420, df = 2)  # this generates 420 samples with a degree of freedom of 2 and setting them to a variable called randNums
head(randNums)
sample_data <- data %>% sample_n(2500)
```{r data_prep, include = FALSE}
library(tidyverse)
data <- read.csv("women15_49.csv", na.strings = "NA")
set.seed(9713) # Replace with your ID's middle 4 digits
sample_data <- data %>% sample_n(2500)
# Load libraries
library(tidyverse)
library(caret)
# seting seed
set.seed(9713)
# 10-fold cross-validation
ctrl <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
cv_model <- train(
know_hiv_test ~ age_group + education + residence + region + religion,
data = newDf,
method = "glm",
family = "binomial",
trControl = ctrl
)
# Load libraries
library(tidyverse)
library(caret)
# seting seed
set.seed(9713)
# 10-fold cross-validation
ctrl <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
cv_model <- train(
know_hiv_test ~ age_group + education + residence + region + religion,
data = sample_data,
method = "glm",
family = "binomial",
trControl = ctrl
)
# Load libraries
library(tidyverse)
library(caret)
# seting seed
set.seed(9713)
# 10-fold cross-validation
ctrl <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
cv_model <- train(
know_hiv_test ~ age_group + education + residence + region + religion,
data = sample_data,
method = "glm",
family = "binomial",
trControl = ctrl
)
# Load libraries
library(tidyverse)
library(caret)
# seting seed
set.seed(9713)
# 10-fold cross-validation
ctrl <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
cv_model <- train(
know_hiv_test ~ age_group + education + residence + region + religion,
data = sample_data,
method = "glm",
family = "binomial",
trControl = ctrl
)
# Load libraries
library(tidyverse)
library(caret)
# seting seed
set.seed(9713)
# 10-fold cross-validation
ctrl <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
cv_model <- train(
know_hiv_test ~ age_group + education + residence + region + religion,
data = sample_data,
method = "glm",
family = "binomial",
trControl = ctrl
)
# Load libraries
library(tidyverse)
library(caret)
# seting seed
set.seed(9713)
# 10-fold cross-validation
ctrl <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
cv_model <- train(
know_hiv_test ~ age_group + education + residence + region + religion,
data = newDf,
method = "glm",
family = "binomial",
trControl = ctrl
)
# Load libraries
library(tidyverse)
library(caret)
# Setting seed for reproducibility
set.seed(9713)
# Setting up 10-fold cross-validation
ctrl <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
# Fit the logistic regression model with cross-validation
cv_model <- train(
know_hiv_test ~ age_group + education + residence + region + religion,
data = newDf,
method = "glm",
family = "binomial",
trControl = ctrl
)
# Load libraries
library(tidyverse)
library(caret)
# Setting seed for reproducibility
set.seed(9713)
# Setting up 10-fold cross-validation
ctrl <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
# Fit the logistic regression model with cross-validation
cv_model <- train(
know_hiv_test ~ age_group + education + residence + region + religion,
data = sample_data,
method = "glm",
family = "binomial",
trControl = ctrl
)
# Load libraries
library(tidyverse)
library(caret)
# seting seed
set.seed(9713)
# 10-fold cross-validation
ctrl <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
cv_model <- train(
know_hiv_test ~ age_group + education + residence + region + religion,
data = sample_data,
method = "glm",
family = "binomial",
trControl = ctrl
)
# I choose the logistic regression model because the outcome variable is binary (yes or no)
# Using v012 (age), v024 (region), v106 (education), v130 (religion), and v151 (sex of household head) as explanatory variables
# Fit logistic regression model
model <- glm(v783 ~ v012 + v024 + v106 + v130 + v151,
data = newDf, family = binomial(link = "logit"))
# Load libraries
library(tidyverse)
library(caret)
# seting seed
set.seed(9713)
# 10-fold cross-validation
ctrl <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
cv_model <- train(
know_hiv_test ~ age_group + education + residence + region + religion,
data = sample_data,
method = "glm",
family = "binomial",
trControl = ctrl
)
set.seed(9713)
# CD4 counts of the patients
cd4_data <- c(258, 268, 264, 286, 270, 231, 253, 220, 240, 230, 240, 260, 240, 296, 266, 227, 264, 264,
230, 254, 262, 267, 241, 231, 237, 244, 269, 247, 224, 246, 244, 219, 253, 238, 244, 243,
258, 222, 246, 254, 253, 229, 247, 221, 255, 253, 248, 241, 215, 220)
# Set sample size and iterations
sample_size <- 30
iterations <- 10000  # number of bootstrap samples
# func bootstrapping to calculate mean and median
bootstrap_results <- function(data, iterations, sample_size) {
# empty vectors for storing results
mean_values <- numeric(iterations)
median_values <- numeric(iterations)
# bootstrapping
for (i in 1:iterations) {
CD4_data_sample <- sample(data, size = sample_size, replace = TRUE)
mean_values[i] <- mean(CD4_data_sample)
median_values[i] <- median(CD4_data_sample)
}
# Calculate 95% confidence intervals
mean_ci <- quantile(mean_values, c(0.025, 0.975))
median_ci <- quantile(median_values, c(0.025, 0.975))
# results
return(list(mean = mean(mean_values), mean_ci = mean_ci,
median = median(median_values), median_ci = median_ci))
}
# Perform bootstrapping
results <- bootstrap_results(cd4_data, iterations, sample_size)
# Output the results
cat("Estimated Mean: ", results$mean, "\n")
cat("95% CI for Mean: [", results$mean_ci[1], ", ", results$mean_ci[2], "]\n")
cat("Estimated Median: ", results$median, "\n")
cat("95% CI for Median: [", results$median_ci[1], ", ", results$median_ci[2], "]\n")
# Load libraries
library(tidyverse)
library(caret)
# seting seed
set.seed(9713)
# 10-fold cross-validation
ctrl <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
cv_model <- train(
know_hiv_test ~ age_group + education + residence + region + religion,
data = sample_data,
method = "glm",
family = "binomial",
trControl = ctrl
)
# Assuming v783 is your variable for HIV test knowledge
newDf <- newDf %>%
mutate(know_hiv_test = ifelse(v783 == 1, 1, 0))
# Load libraries
library(tidyverse)
library(caret)
# seting seed
set.seed(9713)
# 10-fold cross-validation
ctrl <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
cv_model <- train(
know_hiv_test ~ age_group + education + residence + region + religion,
data = sample_data,
method = "glm",
family = "binomial",
trControl = ctrl
)
library(tidyverse)
library(caret)
set.seed(9713)
# Assuming know_hiv_test has been created
ctrl <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
cv_model <- train(
know_hiv_test ~ age_group + education + residence + region + religion,
data = newDf,
method = "glm",
family = "binomial",
trControl = ctrl
)
# Load libraries
library(tidyverse)
library(caret)
# Load data and set seed
data <- read.csv("women15_49.csv", na.strings = "NA")
set.seed(1234) # Replace with your ID's middle 4 digits
sample_data <- data %>% sample_n(2500)
# Clean outcome variable (v756: 1=Knows, 0=Doesn't know)
sample_data <- sample_data %>%
mutate(know_hiv_test = ifelse(v756 == 1, 1, 0)) %>%
filter(!is.na(know_hiv_test))
# Recode factors
sample_data <- sample_data %>%
mutate(
age_group = factor(v013, labels = c("15-19", "20-24", "25-29", "30-34", "35-39", "40-44", "45-49")),
education = factor(v106, labels = c("No Education", "Primary", "Secondary", "Higher")),
residence = factor(v025, labels = c("Urban", "Rural")),
region = factor(v024),
religion = factor(v130)
)
#10-fold cross-validation
ctrl <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
cv_model <- train(
know_hiv_test ~ age_group + education + residence + region + religion,
data = sample_data,
method = "glm",
family = "binomial",
trControl = ctrl
)
# Output cross-validation results
cv_model$results
